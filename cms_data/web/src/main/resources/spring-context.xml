<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-4.1.xsd
                            http://www.springframework.org/schema/aop
					        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
					        http://www.springframework.org/schema/tx
					        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
					        http://www.springframework.org/schema/task
							http://www.springframework.org/schema/task/spring-task-4.0.xsd">
    <!-- 注解驱动 -->
    <context:annotation-config/>

    <!-- 自动扫描组建包:注意不要mvc配置冲突 -->
    <context:component-scan base-package="com.liyu.cms.data.core.dao"/>
    <context:component-scan base-package="com.liyu.cms.data.core.service"/>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="adminDataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
        <constructor-arg index="1" value="BATCH"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.liyu.cms.data.core.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="adminDataSource"></property>
    </bean>


    <!--———— 报表管理的配置JDBC数据源 —————-->

    <bean id="adminDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="${admin.jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${admin.jdbc.url}" />
        <property name="user" value="${admin.jdbc.user}" />
        <property name="password" value="${admin.jdbc.pass}" />
        <!--连接池中保留的最小连接数。 -->
        <property name="minPoolSize" value="${c3p0.minPoolSize}" />
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
        <!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
        <property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}" />
    </bean>


    <tx:advice id="adminTxAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 以下方法必须在事物中执行，一般增、删、改操作需要配置事务 -->
            <!-- REQUIRED 如果当前有事务环境就加入当前正在执行的事务环境，如果当前没有事务，就新建一个事务。 -->
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="import*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="finish*" propagation="REQUIRED"/>
            <tx:method name="freeze*" propagation="REQUIRED"/>
            <tx:method name="edit*" propagation="REQUIRED"/>
            <tx:method name="up*" propagation="REQUIRED"/>
            <tx:method name="down*" propagation="REQUIRED"/>
            <tx:method name="start*" propagation="REQUIRED"/>
            <tx:method name="stop*" propagation="REQUIRED"/>
            <tx:method name="register*" propagation="REQUIRED"/>
            <tx:method name="change*" propagation="REQUIRED"/>
            <!-- 以下方法以非事务方式执行，一般用于查询操作 -->
            <!-- 如果当前存在事务，就把当前事务挂起，等该方法以非事务的状态运行完，再继续原来的事务。 -->
            <!-- read-only="true" 表示只读 -->
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--&lt;!&ndash; 定义切面，在*com.luckymoney.admin.core.service..*.*(..)中执行有关的hibernate session的事务操作 &ndash;&gt;-->
    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="execution(* com.liyu.cms.data.core.service..*.*(..))"/>
        <aop:advisor advice-ref="adminTxAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>

    <!-- task任务扫描注解 -->
    <task:annotation-driven/>

</beans>